- name: Bind Package Installation
  become: true
  ansible.builtin.apt:
    pkg:
      - bind9
      - python3-dnspython
- name: UFW Firewall Configuration
  community.general.ufw:
    rule: allow
    port: '53'
  become: true
  when: ansible_facts['distribution'] == "Ubuntu"
- name: Install Prerequisits on Ansible Host
  ansible.builtin.apt:
    pkg: python3-dnspython
  become: true
  delegate_to: localhost
- name: Copy Bind Config File
  ansible.builtin.copy:
    src: "{{ config_path }}/named.conf"
    dest: "/etc/bind/named.conf"
    owner: root
    group: bind
    mode: '0644'
  become: true
  no_log: true
  notify: Config Change
- name: Copy AppArmour Config File
  ansible.builtin.copy:
    src: apparmour
    dest: /etc/apparmor.d/local/usr.sbin.named
    owner: root
    group: root
    mode: '0644'
  notify: AppArmour Change
  become: true
- name: Create Zones Directory
  ansible.builtin.file:
    path: /etc/bind/zones
    state: directory
    owner: root
    group: bind
    mode: '0775'
  become: true
- name: Get Zones
  ansible.builtin.shell: ls "{{ config_path }}/zones" | sed 's/\.[^.]*$//'
  register: zones
  delegate_to: localhost
  become: true
  changed_when: false

- name: Render Zone Files (Dynamic)
  ansible.builtin.template:
    src: "{{ config_path }}/zones/{{ item }}.j2"
    dest: "/etc/bind/zones/{{ item }}"
    owner: root
    group: bind
    mode: '0775'
    force: false
  become: true
  with_items: "{{ zones.stdout_lines }}"
  when: zones_type == "dynamic"

- name: Render Zone Files (Static)
  ansible.builtin.template:
    src: "{{ config_path }}/zones/{{ item }}.j2"
    dest: "/etc/bind/zones/{{ item }}"
    owner: root
    group: bind
    mode: '0775'
  become: true
  with_items: "{{ zones.stdout_lines }}"
  when: zones_type == "static"


- name: RNDC Reload
  ansible.builtin.command: rndc reload
  become: true
  changed_when: false
- name: Clear Cache
  ansible.builtin.command: resolvectl flush-caches
  become: true
  changed_when: false




- name: Test Name Resolution
  ansible.builtin.command: "nslookup {{ item.address }}"
  delegate_to: localhost
  changed_when: false
  register: testresults
  with_items: "{{ tests }}"
- name: Copy Justfile
  ansible.builtin.copy:
    src: justfile
    dest: "/home/{{ ansible_user }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
  become: true


# TODO: Split this tasks file out

### Dynamic NSUPDATES

- name: Dynamic A Record Creation
  community.general.nsupdate:
    server: 127.0.0.1
    record: "{{ item.record }}"
    value: "{{ item.value }}"
    type: A
  with_items: "{{ a_records }}"
  when: a_records != "changeme"
- name: Dynamic PTR Record Creation
  community.general.nsupdate:
    server: 127.0.0.1
    record: "{{ item.record }}"
    value: "{{ item.value }}"
    type: PTR
  with_items: "{{ ptr_records }}"
  when: ptr_records != "changeme"
- name: Dynamic CNAME Record Creation
  community.general.nsupdate:
    server: 127.0.0.1
    record: "{{ item.record }}"
    value: "{{ item.value }}"
    type: CNAME
  with_items: "{{ cname_records }}"
  when: cname_records != "changeme"
